# Generated by Django 2.2.7 on 2019-12-11 05:18

import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import web.models
import web.utils


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='GoodreadsAuthor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=web.utils.now, editable=False)),
                ('updated_at', models.DateTimeField(default=web.utils.now, editable=False)),
                ('first_name', models.TextField()),
                ('last_name', models.TextField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, web.models.GoodreadsEntity, web.models.Embeddable),
        ),
        migrations.CreateModel(
            name='GoodreadsBook',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=web.utils.now, editable=False)),
                ('updated_at', models.DateTimeField(default=web.utils.now, editable=False)),
                ('title', models.TextField()),
                ('authors', models.ManyToManyField(related_name='books', to='web.GoodreadsAuthor')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, web.models.GoodreadsEntity, web.models.Embeddable),
        ),
        migrations.CreateModel(
            name='GoodreadsSeries',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=web.utils.now, editable=False)),
                ('updated_at', models.DateTimeField(default=web.utils.now, editable=False)),
                ('title', models.TextField()),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, web.models.GoodreadsEntity, web.models.Embeddable),
        ),
        migrations.CreateModel(
            name='GoodreadsUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=web.utils.now, editable=False)),
                ('updated_at', models.DateTimeField(default=web.utils.now, editable=False)),
                ('first_name', models.TextField()),
                ('last_name', models.TextField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, web.models.GoodreadsEntity),
        ),
        migrations.CreateModel(
            name='NotionDatabase',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=web.utils.now, editable=False)),
                ('updated_at', models.DateTimeField(default=web.utils.now, editable=False)),
                ('url', models.TextField(help_text='<strong>Required.</strong>')),
                ('notion_id', models.TextField(blank=True, null=True, unique=True)),
                ('title', models.TextField(blank=True, null=True)),
                ('schema', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text="<strong>Do not fill.</strong> This field is automatically populated by the 'scrape self' action on the Databases overview page.", null=True)),
                ('anki_front_html_template', models.TextField(blank=True, help_text='    <strong>Prerequisite</strong>: "Schema" field must be populated.<br><br>\n    These templates are used to create an Anki card for each record in this database. The syntax is HTML plus Notion database properties as "slugs" (the property name, but lower cased and snake cased). Slugs should also be surrounded by double curly braces.<br>\n    See Schema JSON above for valid slugs (you\'ll need to scrape this DB first).<br>\n    Several special properties are also valid slugs: <code>{{text}}</code> (the full contents of the note), <code>{{url}}</code> (the Notion URL of the note), <code>{{title}}</code>, and <code>{{link}}</code> (a shortcut for <code>&lt;a href="{{url}}&gt;{{title}}&lt;/a&gt;</code>").<br><br>\n    Example: <code>&lt;div&gt;{{link}}&lt;br&gt;{{created_at}}&lt;/div&gt;</code>\n    ', null=True)),
                ('anki_back_html_template', models.TextField(blank=True, help_text='Same syntax as above.', null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='NotionDocument',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=web.utils.now, editable=False)),
                ('updated_at', models.DateTimeField(default=web.utils.now, editable=False)),
                ('url', models.TextField()),
                ('notion_id', models.TextField(blank=True, null=True, unique=True)),
                ('title', models.TextField(blank=True, null=True)),
                ('bert_embedding', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('tfidf_embedding', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('parent_database', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='web.NotionDatabase')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, web.models.Embeddable),
        ),
        migrations.CreateModel(
            name='GoodreadsShelf',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=web.utils.now, editable=False)),
                ('updated_at', models.DateTimeField(default=web.utils.now, editable=False)),
                ('books', models.ManyToManyField(to='web.GoodreadsBook')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, web.models.GoodreadsEntity, web.models.Embeddable),
        ),
        migrations.CreateModel(
            name='GoodreadsQuote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=web.utils.now, editable=False)),
                ('updated_at', models.DateTimeField(default=web.utils.now, editable=False)),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='web.GoodreadsBook')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, web.models.GoodreadsEntity, web.models.Embeddable),
        ),
        migrations.AddField(
            model_name='goodreadsbook',
            name='series',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='books', to='web.GoodreadsSeries'),
        ),
    ]
